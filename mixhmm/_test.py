"""test data
"""
from numpy import *
from scipy.stats import norm
from lib24 import os

from py_util.iter_ import IterRows
from py_cna.SiDCoN import GType
#from util0 import LR, LLRR #for compatibility
from _pfb_test import pfb_test
from py_cna._sample_test import sample_test
LR, LLRR = 3, 8

## the following 3 lines tobe mv to _run.py
HOME = os.environ.get('HOME', '')
hmm_fname = HOME + '/local/penncnv/lib/hh550.hmm'
pfb_fname = HOME + '/local/penncnv/lib/hh550.hg18_sorted.pfb'

def sidcon_simu(bg_frac):
    """return mix lrrs from gtypes, lrrs, and tumor_fracs"""
    gtypes = hmm['states']
    lrrs = hmm['lrr_norms'].args[0]
    bafs = hmm['baf_het_norms'].args[0]
    mix_lrrs, mix_bafs = [], []
    for g, r, b in zip(gtypes, lrrs, bafs):
        obj = GType(g)
        mix_lrrs.append(obj.calcLrr(1 - bg_frac))
        mix_bafs.append(obj.calcBaf(1 - bg_frac))
    return mix_lrrs, mix_bafs


three_states = (['O', 'FF', 'FM'], #states
                [-4, 0, 0], [1.33, 0.21, 0.16], #lrr norms
                [0.5, 0, 0.5], [0.3, 0.02, 0.03], #baf norms
                [10000, 100000, 1000000], #D
                [0.1, 0.2, 0.7], #Pi
                )

#lrr sd is the same for FF and FM now
four_states = (['O', 'F', 'FF', 'FM'], #states
                [-4, -0.66, 0, 0], [1.33, 0.2, 0.2, 0.2], #lrr norms
                [0.5, 0, 0, 0.5], [0.3, 0.02, 0.02, 0.02], #baf norms
                [10000, 50000, 100000, 500000], #D
                [0.05, 0.1, 0.15, 0.7], #Pi
                )

FM9_str = """\
states	LRR_mean	LRR_sd	BAF_mean	BAF_sd	LengthOfRegion	NumberOfSNP
O	-3.53	1.33	0.5	0.3	1000	10
F	-0.66	0.28	0	0.02	100000	23
FF	0	0.21	0	0.02	100000	24
FM	0	0.16	0.5	0.03	10000000	100
FFF	0.4	0.21	0	0.02	100000	3
FFM	0.4	0.21	0.33	0.05	100000	7
FFFF	0.68	0.19	0	0.02	100000	2
FFFM	0.68	0.19	0.25	0.04	100000	4
FFMM	0.68	0.19	0.5	0.03	100000	4
"""

#hmm for the new model
hmm = {'baf_het_norms': norm(array([ 0.5 ,  0.  ,  0.  ,  0.5 ,  0.  ,  0.33,  0.  ,  0.25,  0.5 ]),
     array([ 0.3 ,  0.02,  0.02,  0.03,  0.02,  0.05,  0.02,  0.04,  0.03])),
 'baf_hom_norms':  norm([0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
     [0.29999999999999999, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02]),
 'copy_numbers': array([0, 1, 2, 2, 3, 3, 4, 4, 4]),
 'lrr_norms': norm(array([-3.53, -0.66,  0.  ,  0.  ,  0.4 ,  0.4 ,  0.68 ,  0.68,  0.68]),
     array([ 1.33,  0.28,  0.21,  0.16,  0.21,  0.21,  0.19,  0.19,  0.19])),
 'mean_lens': array([    1000,   100000,   100000, 10000000,   100000,   100000,
         100000,   100000,   100000]),
 'mean_nums': array([ 10,  23,  24, 100,   3,   7,   2,   4,   4]),
 'pi': array([ 0.05649718,  0.1299435 ,  0.13559322,  0.56497175,  0.01694915,
        0.03954802,  0.01129944,  0.02259887,  0.02259887]),
 'states': ['O', 'L', 'LL', 'LR', 'LLL', 'LLR', 'LLLL', 'LLLR', 'LLRR']}


#with LRR before BAF, adjusted LLLL lrr_mean
hmm_str_ = """\
states	LRR_mean	LRR_sd	BAF_mean	BAF_sd	mean_length	mean_number
O	-3.53	1.33	0.5	0.3	1000	10
L	-0.66	0.28	0	0.02	100000	23
LL	0	0.21	0	0.02	100000	24
LR	0	0.16	0.5	0.03	10000000	100
LLL	0.4	0.21	0	0.02	100000	3
LLR	0.4	0.21	0.33	0.05	100000	7
LLLL	0.68	0.19	0	0.02	100000	2
LLLR	0.68	0.19	0.25	0.04	100000	4
LLRR	0.68	0.19	0.5	0.03	100000	4
"""

FM6_str = """\
states	LRR_mean	LRR_sd	BAF_mean	BAF_sd	mean_length	mean_number
O	-3.53	1.33	0.5	0.3	1000	10
F	-0.66	0.28	0	0.02	100000	23
FF	0	0.21	0	0.02	100000	24
FM	0	0.16	0.5	0.03	10000000	100
FFF	0.4	0.21	0	0.02	100000	7
FFM	0.4	0.21	0.33	0.05	100000	13
"""

sample_simu_str0 = """\
Name	Chr	Positon	Log R Ratio	B Allele Frequency
rs3094315	1	742429	-2	0.0
rs12562034	1	758311	-1	0.2
rs3934834	1	995669	0	0.4
rs9442372	1	1008567	1	0.5
rs3737728	1	1011278	1.1	0.8
rs11260588	1	1011521	1.2	1.0
"""

# simulated in test_hmm_simulate: LR 3 10, L 1 16, O 0 8
sample_simu_str1 = """\
Name	Chr	Positon	Log R Ratio	B Allele Frequency
rs3094315	1	742429	0.0176714037059	0.00513658834402
rs12562034	1	758311	0.152390510176	0.473063991652
rs3934834	1	995669	-0.119344919218	1.0
rs9442372	1	1008567	-0.0598523064418	0.538042785872
rs3737728	1	1011278	-0.236276069478	1.0
rs11260588	1	1011521	0.159176702967	1.0
rs6687776	1	1020428	0.0698170280127	1.0
rs9651273	1	1021403	-0.0171089588977	0.486042961109
rs4970405	1	1038818	0.0407415292055	0.00335766117773
rs12726255	1	1039813	0.304364985466	0.486035102695
rs11807848	1	1051029	-0.958073272482	0.996448112623
rs9442373	1	1052501	-0.818521877131	1.0
rs2298217	1	1054842	-0.415129895636	0.0
rs12145826	1	1055892	-0.948579946683	0.0196938637431
rs4970357	1	1066927	-0.655370756683	0.0116462709013
rs9442380	1	1077546	-0.0917834148547	0.0351464614055
rs7553429	1	1080420	-0.729834617591	0.0
rs4970362	1	1084601	-0.70725920482	1.0
rs9660710	1	1089205	-1.03656036719	0.987245919603
rs4970420	1	1096336	-0.685482666498	0.966308838828
rs1320565	1	1109721	-1.09426258701	1.0
rs11260549	1	1111657	-1.73141635613	0.980244580337
rs9729550	1	1125105	-0.52787128061	0.0
rs11721	1	1142494	-0.541771433199	1.0
rs2887286	1	1145994	-0.866448793737	0.0179991441243
rs3813199	1	1148140	-1.11988935565	1.0
rs3766186	1	1152298	-3.35687710626	0.985629101967
rs7515488	1	1153667	-4.82142342297	0.335480981375
rs715643	1	1162770	-3.19607712442	1.0
rs6675798	1	1166460	-2.04316466697	0.512834674961
rs7524470	1	1182378	-3.08577948496	0.505138940898
rs11804831	1	1184667	-3.15931249738	0.353155790926
rs6685064	1	1201155	-4.70017334483	0.373627219573
rs3737717	1	1231947	-3.76404149747	0.191306963612"""




#BAF first
hmm_str0 = """\
"states"	"BAF_mean"	"BAF_sd"	"LRR_mean"	"LRR_sd"	"mean_length"	"mean_number"
"O"	0.5	0.3	-3.53	1.33	1.00E+003	10
"L"	0	0.02	-0.66	0.28	1.00E+005	23
"LL"	0	0.02	0	0.21	1.00E+005	24
"LR"	0.5	0.03	0	0.16	1.00E+007	100
"LLL"	0	0.02	0.4	0.21	1.00E+005	3
"LLR"	0.33	0.05	0.4	0.21	1.00E+005	7
"LLLL"	0	0.02	0.4	0.19	1.00E+005	2
"LLLR"	0.25	0.04	0.68	0.19	1.00E+005	4
"LLRR"	0.5	0.03	0.68	0.19	1.00E+005	4
"""



hmm_hh550 = {
 'A': array([[  9.05850086e-01,   1.00000000e-09,   4.87705750e-02,
          4.53793300e-02,   1.00000000e-08,   3.00000000e-09],
       [  1.00000000e-09,   9.50479016e-01,   4.87705750e-02,
          7.50402000e-04,   7.00000000e-09,   3.00000000e-09],
       [  1.06400000e-06,   2.45300000e-05,   9.98795591e-01,
          1.16542900e-03,   1.24790000e-05,   9.12000000e-07],
       [  4.99980000e-05,   4.99980000e-05,   4.99980000e-05,
          9.99793826e-01,   4.99980000e-05,   6.18700000e-06],
       [  1.00000000e-09,   1.00000000e-09,   4.87705750e-02,
          1.24804400e-03,   9.49981383e-01,   1.00000000e-09],
       [  1.00000000e-09,   1.00000000e-09,   1.76821580e-02,
          1.00000000e-09,   2.97693000e-04,   9.82020152e-01]]),
 'B': array([[  9.50000000e-01,   1.00000000e-06,   5.00000000e-02,
          1.00000000e-06,   1.00000000e-06,   1.00000000e-06],
       [  1.00000000e-06,   9.50000000e-01,   5.00000000e-02,
          1.00000000e-06,   1.00000000e-06,   1.00000000e-06],
       [  1.00000000e-06,   1.00000000e-06,   9.99995000e-01,
          1.00000000e-06,   1.00000000e-06,   1.00000000e-06],
       [  1.00000000e-06,   1.00000000e-06,   5.00000000e-02,
          9.50000000e-01,   1.00000000e-06,   1.00000000e-06],
       [  1.00000000e-06,   1.00000000e-06,   5.00000000e-02,
          1.00000000e-06,   9.50000000e-01,   1.00000000e-06],
       [  1.00000000e-06,   1.00000000e-06,   5.00000000e-02,
          1.00000000e-06,   1.00000000e-06,   9.50000000e-01]]),
 'B1_mean': array([-3.527211, -0.664184,  0.      ,  0.      ,  0.395621,  0.678345]),
 'B1_sd': array([ 1.329152,  0.284338,  0.159645,  0.211396,  0.209089,  0.191579]),
 'B1_uf': 0.01,
 'B2_mean': array([ 0.      ,  0.25    ,  0.333333,  0.5     ,  0.5     ]),
 'B2_sd': array([ 0.016372,  0.042099,  0.045126,  0.034982,  0.304243]),
 'B2_uf': 0.01,
 'M': 6,
 'N': 6,
 'pi': array([  0.00000000e+00,   5.00000000e-04,   9.99000000e-01,
         0.00000000e+00,   5.00000000e-04,   0.00000000e+00])}

hmm_hh550_str = """\
M=6
N=6
A:
0.905850086 0.000000001 0.048770575 0.045379330 0.000000010 0.000000003 
0.000000001 0.950479016 0.048770575 0.000750402 0.000000007 0.000000003 
0.000001064 0.000024530 0.998795591 0.001165429 0.000012479 0.000000912 
0.000049998 0.000049998 0.000049998 0.999793826 0.000049998 0.000006187 
0.000000001 0.000000001 0.048770575 0.001248044 0.949981383 0.000000001 
0.000000001 0.000000001 0.017682158 0.000000001 0.000297693 0.982020152 
B:
0.950000 0.000001 0.050000 0.000001 0.000001 0.000001 
0.000001 0.950000 0.050000 0.000001 0.000001 0.000001 
0.000001 0.000001 0.999995 0.000001 0.000001 0.000001 
0.000001 0.000001 0.050000 0.950000 0.000001 0.000001 
0.000001 0.000001 0.050000 0.000001 0.950000 0.000001 
0.000001 0.000001 0.050000 0.000001 0.000001 0.950000 
pi:
0.000000 0.000500 0.999000 0.000000 0.000500 0.000000 
B1_mean:
-3.527211 -0.664184 0.000000 0.000000 0.395621 0.678345 
B1_sd:
1.329152 0.284338 0.159645 0.211396 0.209089 0.191579 
B1_uf:
0.010000
B2_mean:
0.000000 0.250000 0.333333 0.500000 0.500000 
B2_sd:
0.016372 0.042099 0.045126 0.034982 0.304243 
B2_uf:
0.010000
"""
r_states = [-3.5, -.65, 0, 0, 0.4, 0.7]
r_others = [-5, -4, -3, -2, -.1, .1, .5, .9, 2]

from pprint import pprint
def tmp_test(fun, x):
    mat = []; yticks=[]
    for p in arange(0.1, 1, 0.2):
        for b in x:
            mat.append(fun(p, b))
            yticks.append((p,b))
    #mat = array(mat)
    pprint(zip(yticks, mat))

sample_test_new = """\

rs9681213	3	41894	0.684014869888476	0.417387939644	0.40
rs1516321	3	57010	0.217636022514071	0.404182326278	0.40
rs1400176	3	70973	0.314232902033272	0.449916432423	0.40
rs990284	3	79972	0.374538745387454	0.363519479579	0.40
rs17042559	3	82626	0.0907407407407407	0.417387939644	0.40
rs17042708	3	83226	0.125461254612546 	0.404182326278	0.40
"""

