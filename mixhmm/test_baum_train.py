from numpy import *
from baum_train import *
from py_util.unittest_ import TestCase, main
from lib25 import set_trace

from _test import three_states
from hmm_with_A import HmmWithA

two_states = [e[:2] for e in three_states]
hmm = HmmWithA(*two_states)
hmm.setA([[0.9, 0.1],
        [0.2, 0.8]])
lrrs = [-4,-4,-4, 0,0,0,0,0, -4,-4,-4,-4, 0,0,0,0,0,0,0, -4,-4,-4]
lrrs = array(lrrs, float)

class Tests(TestCase):
    def test_forward(self):
        alpha, scale, p = forward(hmm.Pi, hmm.A, hmm._lrr_emission, Obs=lrrs)
        self.p((alpha, scale, p))
        #self.assert_almost_equal(alpha, alpha_exp)
        #self.assert_almost_equal(scale, scale_exp)
        #self.assert_almost_equal(p, p_exp)

    def test_backward(self):
        beta = backward(hmm.A, hmm._lrr_emission, lrrs, scale_exp)
        print repr(beta)
    #    self.assert_almost_equal(beta, beta_test)


    def test_calc_gamma(self):
        gamma = calc_gamma(alpha_exp, beta_exp)
        #self.assert_almost_equal(gamma, gamma_test)
        #Rabiner eq. 28
        self.assert_almost_equal(gamma.sum(1), ones(len(gamma)))

    def test_calc_xi(self):
        xi = calc_xi(hmm.A, hmm._lrr_emission, lrrs,
                alpha_exp, beta_exp)
        #self.p(xi, xi_test)
        self.assertEqual(xi.shape, (21, 2, 2))
        #Rabiner eq. 38
        gamma = calc_gamma(alpha_exp, beta_exp)
        self.assert_almost_equal(xi.sum(2), gamma[:-1])

    #def test_compute(self):
    #    p, gamma, xi = compute(hmm.Pi, hmm.A, hmm._lrr_emission, lrrs)
    #    #self.assert_almost_equal(gamma, gamma_test)
    #    #self.assert_almost_equal(xi, xi_test)
    #    #self.assert_almost_equal(p, p_test)

    ###? not p
    #def test_update(self):
    #    Pi, A = update(gamma_test, xi_test)
    #    self.p(Pi, hmm.Pi)
    #    self.p(A, hmm.A)

    def test_baum(self):
        Pi, A, p, niter = baum(hmm.Pi, hmm.A, hmm._lrr_emission, lrrs,
                tol=0.01, max_iter=10)
        self.p(Pi)
        self.p(A)
        self.p(p)
        self.p(niter)

    #def test_train(self):
    #    pass

####
p_exp = -2.29386592838
scale_exp = array(
        [ 0.402972  ,  1.0880244 ,  1.0880244 ,  0.18997251,  1.51978012,
        1.51978012,  1.51978012,  1.51978012,  0.2417832 ,  1.0880244 ,
        1.0880244 ,  1.0880244 ,  0.18997251,  1.51978012,  1.51978012,
        1.51978012,  1.51978012,  1.51978012,  1.51978012,  0.2417832 ,
        1.0880244 ,  1.0880244 ])
alpha_exp =array([[  1.00000000e+00,   5.17303191e-79],
       [  1.00000000e+00,   2.87390662e-80],
       [  1.00000000e+00,   2.87390662e-80],
       [  7.14255664e-32,   1.00000000e+00],
       [  1.98404351e-33,   1.00000000e+00],
       [  1.98404351e-33,   1.00000000e+00],
       [  1.98404351e-33,   1.00000000e+00],
       [  1.98404351e-33,   1.00000000e+00],
       [  1.00000000e+00,   1.03460638e-78],
       [  1.00000000e+00,   2.87390662e-80],
       [  1.00000000e+00,   2.87390662e-80],
       [  1.00000000e+00,   2.87390662e-80],
       [  7.14255664e-32,   1.00000000e+00],
       [  1.98404351e-33,   1.00000000e+00],
       [  1.98404351e-33,   1.00000000e+00],
       [  1.98404351e-33,   1.00000000e+00],
       [  1.98404351e-33,   1.00000000e+00],
       [  1.98404351e-33,   1.00000000e+00],
       [  1.98404351e-33,   1.00000000e+00],
       [  1.00000000e+00,   1.03460638e-78],
       [  1.00000000e+00,   2.87390662e-80],
       [  1.00000000e+00,   2.87390662e-80]])
beta_exp =array([[ 2.48156207,  0.55145824],
       [ 0.91909706,  0.20424379],
       [ 0.91909706,  7.35277648],
       [ 0.65798994,  5.26391952],
       [ 0.08224874,  0.65798992],
       [ 0.08224874,  0.65798993],
       [ 0.08224874,  0.65798993],
       [ 2.96095468,  0.65798993],
       [ 4.13593671,  0.91909705],
       [ 0.91909705,  0.20424379],
       [ 0.91909705,  0.20424379],
       [ 0.91909704,  7.35277635],
       [ 0.65798993,  5.26391943],
       [ 0.08224874,  0.65798991],
       [ 0.08224874,  0.65798992],
       [ 0.08224874,  0.65798992],
       [ 0.08224874,  0.65798992],
       [ 0.08224874,  0.65798992],
       [ 2.96095465,  0.65798992],
       [ 4.13593667,  0.91909704],
       [ 0.91909704,  0.20424379],
       [ 0.91909703,  0.91909703]])
#?? donot sum to 1
gamma_test = array([[  2.48156203e+00,   1.42635548e-79],
       [  9.19097050e-01,   2.93488776e-81],
       [  7.73592118e-49,   8.27187341e+00],
       [  9.00507882e-35,   9.19097040e-01],
       [  9.00507882e-35,   9.19097040e-01],
       [  9.00507882e-35,   9.19097040e-01],
       [  9.00507882e-35,   9.19097040e-01],
       [  9.00507882e-35,   9.19097040e-01],
       [  8.27187339e+00,   2.13953324e-78],
       [  9.19097040e-01,   2.93488776e-81],
       [  9.19097040e-01,   2.93488776e-81],
       [  9.19097040e-01,   2.93488776e-81],
       [  6.56470267e-32,   8.27187336e+00],
       [  9.00507882e-35,   9.19097040e-01],
       [  9.00507882e-35,   9.19097040e-01],
       [  9.00507882e-35,   9.19097040e-01],
       [  9.00507882e-35,   9.19097040e-01],
       [  9.00507882e-35,   9.19097040e-01],
       [  9.00507882e-35,   9.19097040e-01],
       [  8.27187333e+00,   2.13953324e-78],
       [  9.19097040e-01,   2.93488776e-81],
       [  9.19097030e-01,   2.64139904e-80]])
xi_test = array([[[  1.00000002e+000,   3.19322949e-081],
        [  5.74781333e-080,   1.48668102e-158]],

       [[  2.41893013e-128,   2.58651599e-079],
        [  7.72419923e-209,   6.69006487e-158]],

       [[  1.16630993e-081,   1.46961238e-049],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  1.22188964e-066,   1.53964577e-034],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  1.22188964e-066,   1.53964577e-034],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  1.22188964e-066,   1.53964577e-034],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  1.22188964e-066,   1.53964577e-034],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  7.93617413e-033,   2.53420258e-113],
        [  1.00000001e+000,   2.58651597e-079]],

       [[  1.00000001e+000,   3.19322949e-081],
        [  2.58651597e-079,   6.69006461e-158]],

       [[  1.00000001e+000,   3.19322949e-081],
        [  3.19322960e-081,   8.25933903e-160]],

       [[  1.00000001e+000,   3.19322949e-081],
        [  3.19322960e-081,   8.25933903e-160]],

       [[  1.24711307e-032,   1.57142858e+000],
        [  3.98231835e-113,   4.06452510e-079]],

       [[  9.89730608e-065,   1.24711307e-032],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  1.22188964e-066,   1.53964577e-034],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  1.22188964e-066,   1.53964577e-034],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  1.22188964e-066,   1.53964577e-034],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  1.22188964e-066,   1.53964577e-034],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  1.22188964e-066,   1.53964577e-034],
        [  1.53964572e-034,   1.57142858e+000]],

       [[  7.93617408e-033,   2.53420258e-113],
        [  1.00000000e+000,   2.58651597e-079]],

       [[  1.00000001e+000,   3.19322949e-081],
        [  2.58651597e-079,   6.69006461e-158]],

       [[  9.99999996e-001,   2.87390660e-080],
        [  3.19322956e-081,   7.43340529e-159]]])
if __name__ == '__main__':
    main()
